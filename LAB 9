class Shape {
    protected String name;
    protected double perimeter;
    protected double area;

    public Shape(String name) {
        this.name = name;
        this.perimeter = 0;
        this.area = 0;
    }

    // Accessor and Mutator for perimeter
    public double getPerimeter() {
        return perimeter;
    }

    public void setPerimeter(double perimeter) {
        this.perimeter = perimeter;
    }

    // Accessor and Mutator for area
    public double getArea() {
        return area;
    }

    public void setArea(double area) {
        this.area = area;
    }

    // Display method
    public void display() {
        System.out.printf("Shape: %s\n", name);
        System.out.printf("Perimeter: %.2f\n", perimeter);
        System.out.printf("Area: %.2f\n", area);
    }
}

class Rectangle extends Shape {
    private double length;
    private double width;

    public Rectangle() {
        super("Rectangle");
    }

    // Method to input side lengths
    public void inputSides(double length, double width) {
        this.length = length;
        this.width = width;
    }

    // Method to compute perimeter and area
    public void compute() {
        perimeter = 2 * (length + width);
        area = length * width;
    }
}

class Square extends Shape {
    private double side;

    public Square() {
        super("Square");
    }

    // Method to input side length
    public void inputSide(double side) {
        this.side = side;
    }

    // Method to compute perimeter and area
    public void compute() {
        perimeter = 4 * side;
        area = side * side;
    }
}

class Circle extends Shape {
    private double diameter;

    public Circle() {
        super("Circle");
    }

    // Method to input diameter
    public void inputDiameter(double diameter) {
        this.diameter = diameter;
    }

    // Method to compute perimeter and area
    public void compute() {
        perimeter = Math.PI * diameter;
        area = Math.PI * Math.pow(diameter / 2, 2);
    }
}

public class TesterShapes {
    public static void main(String[] args) {
        // Test Rectangle
        Rectangle rectangle = new Rectangle();
        rectangle.inputSides(5, 7);
        rectangle.compute();
        rectangle.display();

        // Test Square
        Square square = new Square();
        square.inputSide(4);
        square.compute();
        square.display();

        // Test Circle
        Circle circle = new Circle();
        circle.inputDiameter(10);
        circle.compute();
        circle.display();
    }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

class PersonProfile {
    protected String name;
    protected String gender;
    protected String dob;

    public PersonProfile(String name, String gender, String dob) {
        this.name = name;
        this.gender = gender;
        this.dob = dob;
    }

    public void display() {
        System.out.println("Name: " + name);
        System.out.println("Gender: " + gender);
        System.out.println("Date of Birth: " + dob);
    }
}

class Student extends PersonProfile {
    private String[][] courses;
    private String[] grades;

    public Student(String name, String gender, String dob, String courseFile) throws IOException {
        super(name, gender, dob);
        loadCourses(courseFile);
    }

    public void loadCourses(String filename) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        String line;
        int courseCount = 0;
        while ((line = reader.readLine()) != null) {
            courseCount++;
        }
        reader.close();

        courses = new String[courseCount][5];
        grades = new String[courseCount];

        reader = new BufferedReader(new FileReader(filename));
        int index = 0;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",");
            for (int i = 0; i < 5; i++) {
                courses[index][i] = parts[i];
            }
            grades[index] = getGrade(Double.parseDouble(parts[4]));
            index++;
        }
        reader.close();
    }

    public String getGrade(double mark) {
        if (mark >= 85) return "A";
        if (mark >= 75) return "A-";
        if (mark >= 70) return "B+";
        if (mark >= 65) return "B";
        if (mark >= 60) return "B-";
        if (mark >= 55) return "C+";
        if (mark >= 50) return "C";
        if (mark >= 45) return "D";
        if (mark >= 35) return "E";
        return "F";
    }

    public void display() {
        super.display();
        System.out.println("Courses:");
        for (int i = 0; i < courses.length; i++) {
            System.out.printf("Course: %s, Code: %s, Grade: %s\n", courses[i][0], courses[i][1], grades[i]);
        }
    }
}

public class TesterStudent {
    public static void main(String[] args) {
        try {
            Student student = new Student("John Doe", "Male", "01/01/2000", "course.txt");
            student.display();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

class Lecturer extends PersonProfile {
    private String[][] courses;
    private double[] updatedCreditHours;

    public Lecturer(String name, String gender, String dob, String courseFile) throws IOException {
        super(name, gender, dob);
        loadCourses(courseFile);
    }

    public void loadCourses(String filename) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        String line;
        int courseCount = 0;
        while ((line = reader.readLine()) != null) {
            courseCount++;
        }
        reader.close();

        courses = new String[courseCount][6];
        updatedCreditHours = new double[courseCount];

        reader = new BufferedReader(new FileReader(filename));
        int index = 0;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",");
            for (int i = 0; i < 6; i++) {
                courses[index][i] = parts[i];
            }
            updatedCreditHours[index] = computeCreditHour(Double.parseDouble(parts[4]), Integer.parseInt(parts[5]));
            index++;
        }
        reader.close();
    }

    public double computeCreditHour(double creditHour, int numStudents) {
        if (numStudents >= 150) return creditHour * 3;
        if (numStudents >= 100) return creditHour * 2;
        if (numStudents >= 50) return creditHour * 1.5;
        return creditHour;
    }

    public void display() {
        super.display();
        System.out.println("Courses:");
        for (int i = 0; i < courses.length; i++) {
            System.out.printf("Course: %s, Code: %s, Credit Hour: %.2f\n", courses[i][0], courses[i][1], updatedCreditHours[i]);
        }
    }
}

public class TesterLecturer {
    public static void main(String[] args) {
        try {
            Lecturer lecturer = new Lecturer("Dr. Smith", "Female", "15/05/1980", "lecturer.txt");
            lecturer.display();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

import java.util.Random;

class DiceGame1 {
    private int score;

    public DiceGame1() {
        score = 0;
    }

    public int rollDice() {
        Random rand = new Random();
        return rand.nextInt(6) + 1;
    }

    public void play() {
        while (score < 100) {
            int roll1 = rollDice();
            int roll2 = rollDice();
            System.out.printf("Rolled: %d, %d\n", roll1, roll2);
            if (roll1 == roll2) {
                System.out.println("You can roll again!");
                continue;
            }
            score += roll1 + roll2;
            System.out.printf("Current score: %d\n", score);
            if (score >= 100) {
                System.out.println("You win!");
                break;
            }
        }
    }
}

class DiceGame2 {
    private int score;

    public DiceGame2() {
        score = 0;
    }

    public int rollDice() {
        Random rand = new Random();
        return rand.nextInt(6) + 1;
    }

    public void play() {
        while (score < 100) {
            int roll = rollDice();
            System.out.printf("Rolled: %d\n", roll);
            if (roll == 6) {
                System.out.println("You can roll again!");
                int secondRoll = rollDice();
                System.out.printf("Second roll: %d\n", secondRoll);
                if (secondRoll == 6) {
                    System.out.println("Rolling a second 6 means no score!");
                    score -= roll;
                } else {
                    score += roll + secondRoll;
                }
            } else {
                score += roll;
            }
            System.out.printf("Current score: %d\n", score);
            if (score >= 100) {
                System.out.println("You win!");
                break;
            }
        }
    }
}

public class TesterDice {
    public static void main(String[] args) {
        DiceGame1 game1 = new DiceGame1();
        game1.play();
        
        DiceGame2 game2 = new DiceGame2();
        game2.play();
    }
}
